// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// See .env for the url that is used.
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int        @id @default(autoincrement())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  email           String?    @unique
  name            String?
  password        String?
  accounts        Account[]
  sessions        Session[]
  profile         Profile?
  familyAndFriendsSelectionOptionA1a FamilyAndFriendsSelectionOptionA1a[]
}

model Profile {
  id         Int       @id @default(autoincrement())
  bio        String?
  consumer   User      @relation(fields: [consumerId], references: [id], onDelete: Cascade)
  consumerId Int       @unique
}

//Account creation in the database is automatic and happens when the user is logging in for the first time with a privider (using Auth.js)
model Account {
  id                  Int     @id @default(autoincrement())
  consumerId          Int
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String? @db.Text
  access_token        String? @db.Text
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String? @db.Text
  session_state       String?

  consumer User @relation(fields: [consumerId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

//The session model is used for database sessions. It is not used if JSON Web Tokens are enabled. (see Auth.js)
model Session {
  id            Int       @id @default(autoincrement())
  sessionToken  String    @unique
  consumerId    Int
  expires       DateTime
  consumer      User      @relation(fields: [consumerId], references: [id], onDelete: Cascade)
}

//The Verification Token model is used to store tokens for passwordless sign in. (see Auth.js)
model VerificationToken {
  identifier    String   
  token         String  @unique
  expires       DateTime

  @@unique([identifier, token])
}

// Models for selection 'Family and Friends'

model FamilyAndFriendsSelectionOptionA1a {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  firstName   String?
  secondName  String?
  infix       String?
  lastName    String?
  consumerId  Int
  consumer    User        @relation(fields: [consumerId], references: [id])
}


